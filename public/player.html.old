<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="refresh" content="0;url=react-player.html">
    <title>YouTube Jukebox OBIE/X1 - Player</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <style>
        body {
            margin: 0;
            padding: 0;
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            color: white;
            font-family: Arial, sans-serif;
        }
    </style>
      position: fixed;
      bottom: 10px;
      left: 10px;
      color: #fff;
      background: rgba(0, 0, 0, 0.7);
      padding: 5px 10px;
      border-radius: 4px;
      font-family: Arial, sans-serif;
      font-size: 12px;
      z-index: 1000;
      transition: opacity 0.3s ease;
    }
    
    .fade-out {
      opacity: 0;
    }
  </style>
</head>
<body>
  <div id="player-container"></div>
  <div id="status">Loading player...</div>

  <!-- Load YouTube IFrame API first -->
  <script src="https://www.youtube.com/iframe_api"></script>
  
  <!-- Use inline module initialization -->
  <script type="module">
    // Import and initialize the player
    import { PlayerWindow } from '../src/player/playerWindow';
    
    document.addEventListener('DOMContentLoaded', () => {
      window.playerInstance = new PlayerWindow();
    });
  </script>
  
  <script>
    // Wait for user interaction before attempting fullscreen
    // This addresses the permissions policy errors
    document.addEventListener('DOMContentLoaded', function() {
      const statusEl = document.getElementById('status');
      statusEl.textContent = 'Click anywhere to start player';
      
      // Only try fullscreen on explicit user interaction
      document.addEventListener('click', function requestFullscreen() {
        try {
          // Remove this event listener after first click to prevent multiple attempts
          document.removeEventListener('click', requestFullscreen);
          
          statusEl.textContent = 'Loading player...';
          const docEl = document.documentElement;
          
          // Use Promise-based approach for better error handling
          const requestFS = () => {
            if (docEl.requestFullscreen) {
              return docEl.requestFullscreen();
            } else if (docEl.webkitRequestFullscreen) {
              return docEl.webkitRequestFullscreen();
            } else if (docEl.mozRequestFullScreen) {
              return docEl.mozRequestFullScreen();
            } else if (docEl.msRequestFullscreen) {
              return docEl.msRequestFullscreen();
            }
            return Promise.reject('No fullscreen API available');
          };
          
          requestFS().then(() => {
            console.log('Fullscreen mode enabled');
            statusEl.textContent = 'Player ready';
            setTimeout(() => {
              statusEl.classList.add('fade-out');
            }, 2000);
          }).catch(err => {
            console.warn('Fullscreen request failed:', err);
            statusEl.textContent = 'Playing in window mode';
            setTimeout(() => {
              statusEl.classList.add('fade-out');
            }, 2000);
          });
        } catch(e) {
          console.error('Fullscreen error:', e);
          statusEl.textContent = 'Error starting player';
        }
      });
    });
  </script>
</body>
</html>
